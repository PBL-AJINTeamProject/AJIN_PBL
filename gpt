import cv2
import numpy as np
from hailo_platform.pyhailort import HEF, VDevice, InferVStreams, ConfigureParams

# HEF 파일 경로와 입력 크기 설정
HEF_PATH = "/home/kkymin/Downloads/yolov8s.hef"
INPUT_SHAPE = (640, 640)  # YOLOv8 모델의 입력 크기 (640x640)

def preprocess(frame):
    """전처리: 프레임을 YOLO 입력 크기에 맞게 조정"""
    resized = cv2.resize(frame, INPUT_SHAPE)  # 입력 크기로 리사이즈
    normalized = resized.astype('float32') / 255.0  # 정규화 (0~1)
    transposed = np.transpose(normalized, (2, 0, 1))  # 채널 순서 변경 (HWC -> CHW)
    return transposed[np.newaxis, ...].astype('float32')  # 배치 차원 추가

def postprocess(results, frame, threshold=0.5):
    """후처리: 결과 디코딩 및 바운딩 박스 시각화"""
    for result in results:
        bbox = result['bbox']  # 바운딩 박스 좌표
        score = result['score']  # 신뢰도
        label = result['label']  # 클래스 라벨
        if score > threshold:
            x1, y1, x2, y2 = map(int, bbox)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f"{label}: {score:.2f}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
    return frame

def main():
    # HEF 파일 로드 및 Hailo 장치 초기화
    hef = HEF(HEF_PATH)
    vdevice = VDevice.create()
    configure_params = ConfigureParams.create_from_hef(hef)
    with InferVStreams(vdevice, hef, configure_params) as vstreams:
        # 카메라 초기화
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("카메라를 열 수 없습니다.")
            return
        
        while True:
            ret, frame = cap.read()
            if not ret:
                print("카메라 프레임을 읽을 수 없습니다.")
                break

            # 전처리
            input_data = preprocess(frame)

            # Hailo 가속기로 추론 실행
            results = vstreams.infer(input_data)

            # 후처리 및 시각화
            output_frame = postprocess(results, frame)

            # 화면 출력
            cv2.imshow("Object Detection", output_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
